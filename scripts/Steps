SynchronizeProducer : This is an example of sending simple string message to topic using Synchronize method

1) Create Maven Project
2) Write all dependencies in maven (pom.xml) file
3) Clean and refresh Maven.
4) Create package(i.e tu.cit.examples.producerapis) and write SynchronizeProducer.java
5) Add your class name (i.e, SynchronizeProducer) in pom.xml file in <mainfest> under <build>
6) Create log4j2.xml file under src/main/java/resources
7) Write your code in SynchronizeProducer.java
   a) Set producer properties
   b) Create KafkaProducer
   c) Create ProducerRecord with key and value and send.
   d) Run the code. and investigate the output using kafka-console-consumer.
        kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic partition-examples-Key --from-beginning --property print.key=true
        kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic partition-examples-Key --partition 0 --offset 0 --property print.key=true


CUSTOM PARTITION EXAMPLES

kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic CustomPartition-example  --partition 0 --offset 0 --property print.key=true
---------------------------------------------------------------------------
OBJECTIVE OF THIS TUTORIAL


SUMMARY
If you want to explore more about KAFKA PRODUCER, visit below links
//https://kafka.apache.org/documentation/#producerconfigs
//https://kafka.apache.org/25/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html
//https://downloads.apache.org/kafka/2.4.0/javadoc/org/apache/kafka/clients/producer/ProducerConfig.html









----------------------------------------------------------------------------

KAFKA-CONSOLE-CONSUMER
Print value with key
----------------------
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sync-producer --from-beginning --property print.key=true
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sync-producer --partition 1 --offset 0 --property print.key=true

kafka-console-consumer.sh \
--bootstrap-server localhost:9092 --topic test --from-beginning \
--formatter kafka.tools.DefaultMessageFormatter \
--property print.key=true

kafka-console-consumer.sh \
--bootstrap-server localhost:9092 --topic test --from-beginning \
--formatter kafka.tools.DefaultMessageFormatter \
--property print.key=true
--property print.value=true

kafka-console-consumer.sh \
--bootstrap-server localhost:9092 --topic test --from-beginning \
--formatter kafka.tools.DefaultMessageFormatter \
--property print.key=true
--property print.value=true
--property key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer

kafka-console-consumer.sh \
--bootstrap-server localhost:9092 --topic test --from-beginning \
--formatter kafka.tools.DefaultMessageFormatter \
--property print.key=true
--property print.value=true
--property key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
--max-messages 10

-----------------------------------------------------------------------------------------------------------------

TIMESTAMP
Broker Configuration
Add the following two configurations to broker
message.timestamp.type=CreateTime|LogAppendTime|ProcessTime
max.message.time.difference.ms=Long.MaxValue

Add a time field to both ProducerRecord and ConsumerRecord
-If user specify the timestamp for a ProducerRecord, the ProducerRecord will be sent with this timestamp.
-If user does not specify the timestamp for a ProducerRecord, the producer stamp the ProducerRecord with current time.
-ConsumerRecord will have the timestamp of the message that were stored on broker.

Add a timestamp field to RecordMetadata
-The timestamp in record metadata will be LongAppendTime if it is returned from broker, or it will be the timestamp set by user in ProducerRecord.
- When producer invodes the callback for a message, the timestamp will be available through RecordMetadata.


--------------------------------------------------------------------------------------------------------------------

ProducerExampleRoundRobin
--------------------------
STEP 1:
CREATE TOPICS : kafka-topics.sh --create --bootstrap-server localhost:9092 --topic topic-round-robin --replication-factor 3 --partitions 3
DESCRIBE TOPICS : kafka-topics.sh --describe --bootstrap-server localhost:9092 --topic topic-round-robin

STEP 2: RUN ProducerExampleRoundRobin application

STEP 3: Consume message using kafka-console-consumer

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CASE 1 : Default Partition without Key
--------------------------------------
Topic Name: topic-defaultp)
No. of Message sent : 300
Message were stored in all three partitions ( 0,1,2)

CASE 2 : Default Partition with Key
-----------------------------------
key=India
No. of Message sent : 300
It assigned all 300 messages in partition 0. There were no messages in partition 1 and 2

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ROUND ROBIN PARTITION : ProducerExampleRoundRobin.java
---------------------
CASE 1 : RoundRobinPartition without key
Topic Name : topic-round-robin-10
No. of Message Sent: 300
=>Messages are distributed to all 3 partitions

CASE 2 : RoundRobinPartition with Key
Topic Name : topic-round-robin-10-key
No. of Message Sent:300
=>Messages are distributed to all 3 partitions

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

UNIFORM STICKY PARTITION : ProducerExampleUniformSticky.java
--------------------------
CASE 1 : Without Key
Topic Name : topic-uniform-sticky-1, #partitions = 3, Replication=3
No. of Message Sent : 300
=> Messages are distributed to all 3 partitions

CASE 2 : With Key
Topic Name : topic-uniform-sticky-1, #partitions = 3, Replication=3
No. of Message Sent : 300
=> Messages are distributed to all 3 partitions

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

DEFAULT PARTITION : ProducerExampleDefaultPartition.java
----------------------

WITHOUT SPECIFIYING ANY PARTITIONER CLASS
==========================================
CASE 1 : Without Key
Topic Name : topic-defaultp-2, #partitions = 3, Replication=3
No. of Message Sent : 300
=> Messages are distributed to all 3 partitions

CASE 2 : With Key
Topic Name : topic-defaultp-2-key, #partitions = 3, Replication=3
No. of Message Sent : 300
=> Messages are distributed to a partition based on Hash key

-------------------------------------------------------------------------------------------------------------

WITH SPECIFIYING DEFAULT PARTITIONER CLASS
==========================================
CASE 1 : Without Key
Topic Name : topic-defaultp-dp, #partitions = 3, Replication=3
No. of Message Sent : 500
=>Messages are distributed to all partitions.

CASE 2 : With Key
Topic Name : topic-defaultp-dp-key, #partitions = 3, Replication=3
No. of Message Sent : 10

=> Messages are distributed to a partition based on Hash Key


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ProducerRecord Header and timestamp
-----------------------------------
We have shown a demo to send header and timestamp using producer api
ProducerMessagewithHeader.java   =>to produce messages with header and timestamp
ConsumerMessagewithHeader.java   => consume header and timestamp along with message.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Metrics of Producer
-------------------
We have collected and printed the producer's metrics
ProducerMessagewithHeader.java

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Producer Interceptor
-------------------
MyProducerInterceptorExample.java
ProduceMessagewithHeader.java
